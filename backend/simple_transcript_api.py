"""
Simple Transcript Email API using requests instead of SendGrid library
Add Corect credential  in guthub action credential
"""

import os
import json
import requests
from datetime import datetime
from fastapi import APIRouter, HTTPException
from pydantic import BaseModel
from typing import List
from loguru import logger
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

router = APIRouter()

# SendGrid Configuration
# SendGrid Configuration
SENDGRID_API_KEY = os.getenv("SENDGRID_API_KEY", "").strip()
FROM_EMAIL = os.getenv("FROM_EMAIL", "niranjan@dotzoo.net").strip()
ADMIN_EMAIL = os.getenv("ADMIN_EMAIL", "dotzookr@gmail.com").strip()

SENDGRID_URL = "https://api.sendgrid.com/v3/mail/send"

class ChatMessage(BaseModel):
    sender: str
    text: str
    timestamp: str

class TranscriptRequest(BaseModel):
    name: str
    phone: str
    email: str
    messages: List[ChatMessage]

def send_email_via_requests(to_email: str, subject: str, body: str):
    """Send email via SendGrid API using requests"""
    
    if not SENDGRID_API_KEY:
        logger.error("SENDGRID_API_KEY not configured")
        raise HTTPException(status_code=500, detail="Email service not configured")
    
    headers = {
        "Authorization": f"Bearer {SENDGRID_API_KEY}",
        "Content-Type": "application/json"
    }
    
    payload = {
        "personalizations": [
            {
                "to": [{"email": to_email}],
                "subject": subject
            }
        ],
        "from": {"email": FROM_EMAIL},
        "content": [
            {
                "type": "text/plain",
                "value": body
            }
        ]
    }
    
    try:
        response = requests.post(SENDGRID_URL, headers=headers, json=payload)
        
        if response.status_code == 202:
            logger.info(f"Email sent successfully to {to_email}")
            return {"status": "sent", "status_code": response.status_code}
        else:
            logger.error(f"SendGrid error: {response.status_code} - {response.text}")
            raise HTTPException(status_code=500, detail=f"SendGrid error: {response.status_code}")
            
    except requests.exceptions.RequestException as e:
        logger.error(f"Request error: {e}")
        raise HTTPException(status_code=500, detail="Failed to send email")

@router.post("/api/send-transcript")
async def send_transcript(transcript_data: TranscriptRequest):
    """Send chat transcript via email"""
    
    try:
        logger.info(f"Sending transcript for: {transcript_data.name}")
        
        # Format timestamp
        current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        
        # Format conversation
        conversation_text = "\n".join([
            f"[{msg.timestamp}] {msg.sender}: {msg.text}" 
            for msg in transcript_data.messages
        ])
        
        # Create email body
        email_body = f"""
Chat Transcript - {current_time}

Patient Details:
Name: {transcript_data.name}
Phone: {transcript_data.phone}
Email: {transcript_data.email}

Complete Conversation:
{conversation_text}

---
This transcript was automatically generated by the Dr. Meenakshi Tomar Dental Chatbot.
        """.strip()
        
        # Send email
        result = send_email_via_requests(
            to_email=ADMIN_EMAIL,
            subject=f"New Chat Transcript - {transcript_data.name}",
            body=email_body
        )
        
        logger.info(f"Transcript sent successfully for: {transcript_data.name}")
        
        return {
            "status": "sent",
            "message": "Transcript sent successfully",
            "sendgrid_response": result
        }
        
    except Exception as e:
        logger.error(f"Error sending transcript: {e}")
        raise HTTPException(status_code=500, detail=str(e))
